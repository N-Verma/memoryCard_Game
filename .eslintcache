[{"G:\\Projects\\cardgame\\src\\App.js":"1","G:\\Projects\\cardgame\\src\\components\\Landing\\landing.js":"2","G:\\Projects\\cardgame\\src\\reportWebVitals.js":"3","G:\\Projects\\cardgame\\src\\index.js":"4","G:\\Projects\\cardgame\\src\\components\\Game\\game.js":"5","G:\\Projects\\cardgame\\src\\components\\constants\\data.js":"6","G:\\Projects\\cardgame\\src\\components\\Timer\\timer.js":"7"},{"size":915,"mtime":1607180066965,"results":"8","hashOfConfig":"9"},{"size":2371,"mtime":1607149922763,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":504,"mtime":1607135241095,"results":"12","hashOfConfig":"9"},{"size":4186,"mtime":1607138802509,"results":"13","hashOfConfig":"9"},{"size":1158,"mtime":1606998258025,"results":"14","hashOfConfig":"9"},{"size":1512,"mtime":1607176263634,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"164s8wt",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"G:\\Projects\\cardgame\\src\\App.js",[],"G:\\Projects\\cardgame\\src\\components\\Landing\\landing.js",[],["34","35"],"G:\\Projects\\cardgame\\src\\reportWebVitals.js",[],["36","37"],"G:\\Projects\\cardgame\\src\\index.js",[],"G:\\Projects\\cardgame\\src\\components\\Game\\game.js",["38","39"],"import React,{useEffect, useState} from 'react'\r\nimport './game.css'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {Timer} from '../Timer/timer'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\n//import {faShip,faAddressBook,faCalculator,faCoffee,faBomb,faSkull,faTrain,faDrum,faBriefcase,faTree} from '@fortawesome/free-solid-svg-icons'\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport { eiconarr, escore, ewidth, hiconarr, hscore, hwidth, miconarr, mscore, mwidth } from '../constants/data'\r\n\r\nexport const Game=(props)=>{\r\n\r\n    const [iconarr, setIconarr] = useState([]);\r\n    const [tscore,setTscore] = useState();\r\n    const [curr,setCurr] = useState([])\r\n    let history = useHistory();\r\n    const [score,setScore] = useState(0);\r\n    const rotate=(event)=>{\r\n        var par = document.getElementById(event.currentTarget.id);\r\n        var child = par.children[0];\r\n        setCurr([...curr,par])\r\n        child.style.transform = \"rotateY(180deg)\";\r\n        setTimeout(()=>{child.style.transform = \"rotateY(0deg)\";},3000)\r\n    }\r\n    useEffect(()=>{\r\n        switch(parseInt(props.match.params.id)){\r\n            case 1:\r\n                setIconarr(eiconarr)\r\n                setTscore(escore)\r\n                document.querySelector(\".board\").style.width=ewidth\r\n                break;\r\n            case 2:\r\n                setIconarr(miconarr)\r\n                setTscore(mscore)\r\n                document.querySelector(\".board\").style.width=mwidth\r\n                break;\r\n            case 3:\r\n                setIconarr(hiconarr)\r\n                setTscore(hscore)\r\n                document.querySelector(\".board\").style.width=hwidth\r\n                break;\r\n        }\r\n        if(curr.length===2){\r\n            if((curr[0].children[0].children[1].id===curr[1].children[0].children[1].id)&&(curr[0].id!==curr[1].id)){\r\n                var c1 = curr[0].children[0];\r\n                var c2 = curr[1].children[0];\r\n                \r\n                setScore(score+1)\r\n                \r\n                setTimeout(()=>{\r\n                    c1.style.display=\"none\"\r\n                    c2.style.display=\"none\"\r\n                    curr[0].style.zIndex=\"-1\"\r\n                    curr[1].style.zIndex=\"-1\"\r\n                },1000)\r\n                \r\n                setCurr([])\r\n            }else{\r\n                setCurr([])\r\n                var nc1 = curr[0].children[0];\r\n                var nc2 = curr[1].children[0];\r\n                \r\n                setTimeout(()=>{\r\n                    nc1.style.transform=\"rotateY(0deg)\"\r\n                    nc2.style.transform=\"rotateY(0deg)\"\r\n                },1000)\r\n            }\r\n        }\r\n    },[curr])\r\n\r\n    \r\n    if(score===tscore){\r\n        confirmAlert({\r\n            message: 'Congrats You Won !!!!!',\r\n            buttons: [\r\n              {\r\n                label: 'Return',\r\n                onClick: () => {\r\n                        history.push(\"/\");\r\n                        localStorage.setItem('win',parseInt(localStorage.getItem('win'))+1);\r\n                        \r\n                    }\r\n              },\r\n              \r\n            ]\r\n          });\r\n    }\r\n    //console.log(\"here\")\r\n    //\r\n    // var bool = true;\r\n    // console.log(bool)\r\n    // if(bool){\r\n    //     shuffle(iconarr);\r\n    //     bool=false\r\n    //     console.log(bool)\r\n    // }\r\n    return(\r\n        <div>\r\n            <Timer sc={score} tsc={tscore} id={props.match.params.id}/>\r\n        <div class=\"container\">\r\n        \r\n        <div class=\"board\">\r\n            {(iconarr).map((icon,index)=>{\r\n                return(\r\n                <div key={index} id={`in${index}`} onClick={rotate} class=\"card\" >\r\n                    <div class=\"inner\">\r\n                        <div class=\"gfront\">\r\n                        </div>\r\n                        <div class=\"gback\" id={icon.iconName}>\r\n                            <FontAwesomeIcon icon={icon} class=\"icon\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                )\r\n            })}\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}",["40","41"],"G:\\Projects\\cardgame\\src\\components\\constants\\data.js",[],"G:\\Projects\\cardgame\\src\\components\\Timer\\timer.js",["42","43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"44","replacedBy":"48"},{"ruleId":"46","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":26,"column":9,"nodeType":"52","messageId":"53","endLine":42,"endColumn":10},{"ruleId":"54","severity":1,"message":"55","line":69,"column":7,"nodeType":"56","endLine":69,"endColumn":13,"suggestions":"57"},{"ruleId":"44","replacedBy":"58"},{"ruleId":"46","replacedBy":"59"},{"ruleId":"54","severity":1,"message":"60","line":12,"column":15,"nodeType":"61","endLine":12,"endColumn":63},{"ruleId":"54","severity":1,"message":"62","line":15,"column":13,"nodeType":"63","endLine":15,"endColumn":23},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],["64"],["65"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.match.params.id' and 'score'. Either include them or remove the dependency array. You can also do a functional update 'setScore(s => ...)' if you only need 'score' in the 'setScore' call.","ArrayExpression",["66"],["64"],["65"],"Assignments to the 'timer' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","CallExpression","Assignments to the 'res' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","BinaryExpression","no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [curr, props.match.params.id, score]",{"range":"69","text":"70"},[2746,2752],"[curr, props.match.params.id, score]"]